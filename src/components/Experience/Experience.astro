---
import ExperienceItem from "./ExperienceItem.astro";

const experienceItems = [
    {
        id: 'innowise',
        date: { en: "Sep 2021 – Present", es: "Abril 2025 – Presente" },
        role: { en: "Senior Software Engineer", es: "Desarrollador Backend" },
        company: "Innowise",
        location: { en: "Remote", es: "Presencial" },
        mode: { en: "Full-time", es: "Tiempo completo" },
        description: {
            en: "",
            es: ""
        },
        link: "https://innowise.com",
    },
    {
        id: 'TOPSYS IT',
        date: { en: "2022 – April 2025", es: "2022 – Abril 2025" },
        role: { en: "Full Stack Software Developer", es: "Desarrollador de Software Full Stack" },
        company: "TOPSYS IT",
        location: { en: "Remote", es: "Remoto" },
        mode: { en: "Full-time", es: "Tiempo completo" },
        description: {
            en: "",
            es: ""
        },
        link: "https://topsysit.com",
    },
    {
        id: 'elinext',
        date: { en: "Oct 2017 – Sep 2019", es: "Mayo 2024 – Septiembre 2024" },
        role: { en: "Backend Developer", es: "Desarrollador de Software Full Stack" },
        company: "Elinext",
        location: { en: "Remote", es: "Remoto" },
        mode: { en: "Full-time", es: "Medio tiempo" },
        description: {
            en: "",
            es: ""
        },
        link: "https://www.elinext.com",
    },
      {
        id: 'devico Solutions',
        date: { en: "Aug 2015 – Sep 2017", es: "Mayo 2024 – Septiembre 2024" },
        role: { en: "Frontend Developer", es: "Desarrollador de Software Full Stack" },
        company: "Devico Solutions",
        location: { en: "Remote", es: "Remoto" },
        mode: { en: "Full-time", es: "Medio tiempo" },
        description: {
            en: "",
            es: ""
        },
        link: "https://devico.io",
    },
];

---
<ol class="relative border-s border-gray-200/20 dark:border-gray-700/50" id="experience-list">
    {experienceItems.map((item) => (
        <li class="mb-10 ms-8 timeline-item">
            <ExperienceItem
                date={item.date.en}
                role={item.role.en}
                company={item.company}
                location={item.location.en}
                mode={item.mode.en}
                description={item.description.en}
                link={item.link}
                data-date-en={item.date.en}
                data-date-es={item.date.es}
                data-role-en={item.role.en}
                data-role-es={item.role.es}
                data-location-en={item.location.en}
                data-location-es={item.location.es}
                data-mode-en={item.mode.en}
                data-mode-es={item.mode.es}
                data-description-en={item.description.en}
                data-description-es={item.description.es}
            />
        </li>
    ))}
</ol>
<script>
    import { currentLanguage } from '../../i18n/languageStore';

    function updateExperienceContent() {
        const lang = currentLanguage.get();
        const experienceList = document.getElementById('experience-list');
        if (!experienceList) return;

        const items = experienceList.querySelectorAll('.experience-item');
        items.forEach((item) => {
            const dateEl = item.querySelector('.experience-date');
            const roleEl = item.querySelector('.experience-role');
            const locationEl = item.querySelector('.experience-location');
            const modeEl = item.querySelector('.experience-mode');
            const descEl = item.querySelector('.experience-description');

            if (dateEl) dateEl.textContent = item.getAttribute(`data-date-${lang}`) || dateEl.textContent;
            if (roleEl) roleEl.textContent = item.getAttribute(`data-role-${lang}`) || roleEl.textContent;
            if (locationEl) locationEl.textContent = item.getAttribute(`data-location-${lang}`) || locationEl.textContent;
            if (modeEl) modeEl.textContent = item.getAttribute(`data-mode-${lang}`) || modeEl.textContent;
            if (descEl) {
                const desc = item.getAttribute(`data-description-${lang}`);
                if (desc) descEl.innerHTML = desc.replace(/\n/g, '<br>');
            }
        });
    }

    currentLanguage.subscribe(updateExperienceContent);
    
    document.addEventListener('DOMContentLoaded', () => {
        updateExperienceContent();

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });

        document.querySelectorAll('.timeline-item').forEach((item, index) => {
            item.style.setProperty('--animation-delay', `${index * 150}ms`);
            observer.observe(item);
        });
    });

   
</script>

<style>
    .timeline-item {
        opacity: 0;
        transform: translateX(20px);
        animation: slide-in 0.5s ease-out forwards;
        animation-delay: var(--animation-delay, 0ms);
    }

    @keyframes slide-in {
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
</style>

